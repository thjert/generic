import os.path;


print 'DEFINE VARIABLES FOR APPLICATION DEPLOYMENT';
what_to_do='deploy';
what_to_do='undeploy';
###target_names='custom_domain'; Funkar ej
###target_names='managed_1';
###target_names='AdminServer(admin)'; Funkar ej
target_names='AdminServer';

print 'CREATE VARIABLES';
domain_application_home='/oracle/wls10.3.6/config/Domains/custom_domain/apps';
domain_configuration_home='/oracle/wls10.3.6/config/Domains/custom_domain/config';
domain_name='custom_domain';
fusion_middleware_home='/oracle/wls10.3.6/product/Oracle_Home';
java_home='/oracle/wls10.3.6/jdk1.8.0_161';
middleware_home='/oracle/wls10.3.6/product/Oracle_Home';
node_manager_home='/oracle/wls10.3.6/config/Domains/custom_domain/nodemanager';
weblogic_home='/oracle/wls10.3.6/product/Oracle_Home/wlserver';
admin_server_listen_address='localhost'
admin_server_listen_port='7001'
admin_username='weblogic'
admin_password='welcome1'

admin_server_url = 't3://' + admin_server_listen_address + ':' + admin_server_listen_port;
admin_server_config_file = domain_configuration_home + '/admin_server_config_file.properties';
admin_server_key_file = domain_configuration_home + '/admin_server_key_file.properties';

def connect_to_admin_server():
    print 'CONNECT TO ADMIN SERVER';
    if os.path.isfile(admin_server_config_file) and os.path.isfile(admin_server_key_file):
        print '- USING CONFIG AND KEY FILE';
        connect(userConfigFile=admin_server_config_file, userKeyFile=admin_server_key_file, url=admin_server_url);
    else:
        print '-USING USERNAME AND PASSWORD';
        connect(admin_username, admin_password, admin_server_url);

def determine_application_names():
    application_names = [];
    ###directory_entry_name = [];
    deployed_application_names = [];
    app_deployments = cmo.getAppDeployments();
    #####print "app_deployments " + app_deployments;
    for app_deployment in app_deployments:
        deployed_application_names.append(app_deployment.getName());


    if what_to_do == 'undeploy':
        return deployed_application_names;

    directory_entry_names = os.listdir(domain_application_home);
    print directory_entry_names;
    for directory_entry_name in directory_entry_names:
        print "directory_entry_name " + directory_entry_name;
        print "domain_application_home " + domain_application_home;
        print "directory_entry_name " + directory_entry_name;
        full_path_of_app = os.path.join(domain_application_home, directory_entry_name);
        print "directory and file " + full_path_of_app
        if not os.path.isfile(full_path_of_app):
            print "domain_application_home " + domain_application_home;
        else:
            print "full_path_of_app " + full_path_of_app;
            #####print "deployed_application_names " + deployed_application_names;
            print "deployed_application_names -->";
            print deployed_application_names;
            if directory_entry_name not in deployed_application_names:
                print "application_names "
                print  application_names;
                print "directory_entry_name "
                print  directory_entry_name;
                application_names.append(directory_entry_name);
                print  application_names;


    return application_names;

def deploy_applications(application_names):
    for application_name in application_names:
        print application_names
        application_path = os.path.join(domain_application_home, application_name);
        print application_path
        deployment_plan = application_path + '/plan/Plan.xml';
        deployment_artifact_path = application_path + '/app';
        deployment_artifact_path = application_path

        if os.path.exists(deployment_artifact_path):
            ###deployment_artifact = deployment_artifact_path + '/' + os.listdir(deployment_artifact_path)[0];
            ###deployment_artifact = deployment_artifact_path + '/' + deployment_artifact_path;
            deployment_artifact = deployment_artifact_path

        if os.path.isfile(deployment_plan):
            print 'DEPLOYING APPLICATION ' + application_name + ' WITH DEPLOYMENT PLAN';
            deploy(appName=application_name, path=deployment_artifact, targets=target_names, planPath=deployment_plan);
        else:
            print 'DEPLOYING APPLICATION ' + application_name + ' WITHOUT DEPLOYMENT PLAN';
            print "I GET HERE"
            deploy(appName=application_name, path=deployment_artifact, targets=target_names);


def undeploy_applications(application_names):
    for application_name in application_names:
        print 'UNDEPLOYING APPLICATION ' + application_name;
        undeploy(appName=application_name);

def start_edit_mode():
    print 'START EDIT MODE';
    edit();
    startEdit();

def save_and_active_changes():
    print 'SAVE AND ACTIVATE CHANGES';
    save();
    activate(block='true');

connect_to_admin_server();

start_edit_mode();

application_names = determine_application_names();

if what_to_do == 'deploy' and application_names:
    deploy_applications(application_names);
elif what_to_do == 'undeploy' and application_names:
    undeploy_applications(application_names);
else:
    print 'NOTHING TO DO';



save_and_active_changes();
